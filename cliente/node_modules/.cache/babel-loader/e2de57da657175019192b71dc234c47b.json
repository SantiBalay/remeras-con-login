{"ast":null,"code":"/* eslint no-restricted-globals : 0 */\n//para que anden las globables\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nconst AFTER_LOG = '/productos';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientID,\n      redirectUri: AUTH_CONFIG.redirectUri,\n      audience: AUTH_CONFIG.apiURL,\n      responseType: 'token id_token',\n      scope: 'read:productos'\n    });\n\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResults) => {\n        if (authResults && authResults.accessToken && authResults.idToken) {\n          let expiresAt = JSON.stringify(authResults.expiresIn * 1000 + new Date().getTime()); // lo convierto a timestamp\n\n          localStorage.setItem(\"access_token\", authResults.accessToken);\n          localStorage.setItem(\"id_token\", authResults.idToken);\n          localStorage.setItem(\"expires_at\", expiresAt);\n          location.hash = \"\"; // borro del query stream por seguridad\n\n          location.pathname = AFTER_LOG;\n          console.log(\"HOLA\");\n        } else {\n          console.log(err);\n        }\n      });\n    };\n\n    this.isAuthenticated = () => {\n      let expiresAt = JSON.parse(localStorage.getItem('expires_at')); // obtengo el timestamp de la validez de la key\n\n      return new Date().getTime() < expiresAt; // me fijo si sigue siendo valida\n    };\n\n    this.logout = () => {\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"id_token\");\n      localStorage.removeItem(\"expires_at\");\n      location.pathname = AFTER_LOG;\n    };\n\n    this.getAccesToken = () => {\n      const access = localStorage.getItem('access_token');\n\n      if (!accessToken) {\n        return new Error('Hubo algun problema generando el token');\n      }\n\n      return access;\n    };\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/santiagobalay/Desktop/workspace/ReactProjects/pagina-react-con-auth/cliente/src/Auth.js"],"names":["auth0","AUTH_CONFIG","AFTER_LOG","Auth","WebAuth","domain","clientID","redirectUri","audience","apiURL","responseType","scope","login","authorize","handleAuthentication","parseHash","err","authResults","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","location","hash","pathname","console","log","isAuthenticated","parse","getItem","logout","removeItem","getAccesToken","access","Error"],"mappings":"AAAA;AAAuC;AAEvC,OAAOA,KAAP,MAAkB,UAAlB;AAEA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,MAAMC,SAAS,GAAG,YAAlB;;AACA,MAAMC,IAAN,CAAW;AAAA;AAAA,SAEPH,KAFO,GAEC,IAAIA,KAAK,CAACI,OAAV,CAAkB;AACtBC,MAAAA,MAAM,EAAEJ,WAAW,CAACI,MADE;AAEtBC,MAAAA,QAAQ,EAAEL,WAAW,CAACK,QAFA;AAGtBC,MAAAA,WAAW,EAAEN,WAAW,CAACM,WAHH;AAItBC,MAAAA,QAAQ,EAAEP,WAAW,CAACQ,MAJA;AAKtBC,MAAAA,YAAY,EAAE,gBALQ;AAMtBC,MAAAA,KAAK,EAAE;AANe,KAAlB,CAFD;;AAAA,SAYPC,KAZO,GAYC,MAAM;AACV,WAAKZ,KAAL,CAAWa,SAAX;AACH,KAdM;;AAAA,SAgBPC,oBAhBO,GAgBgB,MAAM;AACzB,WAAKd,KAAL,CAAWe,SAAX,CAAqB,CAACC,GAAD,EAAKC,WAAL,KAAqB;AAEtC,YAAGA,WAAW,IAAIA,WAAW,CAACC,WAA3B,IAA0CD,WAAW,CAACE,OAAzD,EAAkE;AAC9D,cAAIC,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBL,WAAW,CAACM,SAAb,GAA0B,IAA1B,GAAiC,IAAIC,IAAJ,GAAWC,OAAX,EAAhD,CAAhB,CAD8D,CACwB;;AACtFC,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCV,WAAW,CAACC,WAAjD;AACAQ,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCV,WAAW,CAACE,OAA7C;AACAO,UAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC;AACAQ,UAAAA,QAAQ,CAACC,IAAT,GAAgB,EAAhB,CAL8D,CAK3C;;AACnBD,UAAAA,QAAQ,CAACE,QAAT,GAAoB5B,SAApB;AACA6B,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,SARD,MAQO;AACHD,UAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;AACH;AACJ,OAbD;AAcH,KA/BM;;AAAA,SAiCPiB,eAjCO,GAiCW,MAAM;AACpB,UAAIb,SAAS,GAAGC,IAAI,CAACa,KAAL,CAAWR,YAAY,CAACS,OAAb,CAAqB,YAArB,CAAX,CAAhB,CADoB,CAC2C;;AAC/D,aAAO,IAAIX,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B,CAFoB,CAEoB;AAC3C,KApCM;;AAAA,SAsCPgB,MAtCO,GAsCE,MAAM;AACXV,MAAAA,YAAY,CAACW,UAAb,CAAwB,cAAxB;AACAX,MAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;AACAX,MAAAA,YAAY,CAACW,UAAb,CAAwB,YAAxB;AAEAT,MAAAA,QAAQ,CAACE,QAAT,GAAoB5B,SAApB;AACH,KA5CM;;AAAA,SA8CPoC,aA9CO,GA8CS,MAAM;AAClB,YAAMC,MAAM,GAAGb,YAAY,CAACS,OAAb,CAAqB,cAArB,CAAf;;AAEA,UAAG,CAACjB,WAAJ,EAAiB;AACb,eAAO,IAAIsB,KAAJ,CAAU,wCAAV,CAAP;AACH;;AACD,aAAOD,MAAP;AACH,KArDM;AAAA;;AAAA;;AA0DX,eAAepC,IAAf","sourcesContent":["/* eslint no-restricted-globals : 0 */ //para que anden las globables\n\nimport auth0 from 'auth0-js';\n\nimport { AUTH_CONFIG } from './auth0-variables';\n\nconst AFTER_LOG = '/productos'\nclass Auth {\n\n    auth0 = new auth0.WebAuth({\n        domain: AUTH_CONFIG.domain,\n        clientID: AUTH_CONFIG.clientID,\n        redirectUri: AUTH_CONFIG.redirectUri,\n        audience: AUTH_CONFIG.apiURL,\n        responseType: 'token id_token',\n        scope: 'read:productos',\n    })\n    \n\n    login = () => {\n        this.auth0.authorize()\n    }\n\n    handleAuthentication = () => {\n        this.auth0.parseHash((err,authResults) => {\n            \n            if(authResults && authResults.accessToken && authResults.idToken) {\n                let expiresAt = JSON.stringify((authResults.expiresIn) * 1000 + new Date().getTime()) // lo convierto a timestamp\n                localStorage.setItem(\"access_token\", authResults.accessToken)\n                localStorage.setItem(\"id_token\", authResults.idToken)\n                localStorage.setItem(\"expires_at\", expiresAt)\n                location.hash = \"\" // borro del query stream por seguridad\n                location.pathname = AFTER_LOG\n                console.log(\"HOLA\")\n            } else {\n                console.log(err)\n            }\n        })\n    }\n\n    isAuthenticated = () => {\n        let expiresAt = JSON.parse(localStorage.getItem('expires_at')) // obtengo el timestamp de la validez de la key\n        return new Date().getTime() < expiresAt // me fijo si sigue siendo valida\n    }\n\n    logout = () => {\n        localStorage.removeItem(\"access_token\")\n        localStorage.removeItem(\"id_token\")\n        localStorage.removeItem(\"expires_at\")\n\n        location.pathname = AFTER_LOG\n    }\n\n    getAccesToken = () => {\n        const access = localStorage.getItem('access_token')\n\n        if(!accessToken) {\n            return new Error('Hubo algun problema generando el token')\n        }\n        return access\n    }\n\n\n}\n \nexport default Auth;"]},"metadata":{},"sourceType":"module"}