{"ast":null,"code":"/* eslint no-restricted-globals : 0 */\n//para que anden las globables\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nconst LOGIN_SUCCESS = '/contacto';\nconst LOGIN_FAILURE = '/';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientID,\n      redirectUri: AUTH_CONFIG.redirectUri,\n      audience: AUTH_CONFIG.apiURL,\n      responseType: 'token id_token',\n      scope: 'read:productos'\n    });\n\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResults) => {\n        if (authResults) {\n          let expiresAt = JSON.stringify(authResults.expiresIn * 1000 + new Date().getTime()); // lo convierto a timestamp\n\n          localStorage.setItem(\"access_token\", authResults.accessToken);\n          localStorage.setItem(\"id_token\", authResults.idToken);\n          localStorage.setItem(\"expires_at\", expiresAt);\n          location.hash = \"\"; // borro del query stream por seguridad\n\n          location.pathname = LOGIN_SUCCESS;\n          console.log(\"HOLA\");\n        } else {\n          location.pathname = LOGIN_FAILURE;\n        }\n      });\n    };\n\n    this.isAuthenticated = () => {\n      let expiresAt = JSON.parse(localStorage.getItem('expires_at')); // obtengo el timestamp de la validez de la key\n\n      return new Date().getTime() < expiresAt; // me fijo si sigue siendo valida\n    };\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/santiagobalay/Desktop/workspace/ReactProjects/pagina-react-con-auth/cliente/src/Auth.js"],"names":["auth0","AUTH_CONFIG","LOGIN_SUCCESS","LOGIN_FAILURE","Auth","WebAuth","domain","clientID","redirectUri","audience","apiURL","responseType","scope","login","authorize","handleAuthentication","parseHash","err","authResults","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","accessToken","idToken","location","hash","pathname","console","log","isAuthenticated","parse","getItem"],"mappings":"AAAA;AAAuC;AAEvC,OAAOA,KAAP,MAAkB,UAAlB;AAEA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,MAAMC,aAAa,GAAG,WAAtB;AACA,MAAMC,aAAa,GAAG,GAAtB;;AACA,MAAMC,IAAN,CAAW;AAAA;AAAA,SAEPJ,KAFO,GAEC,IAAIA,KAAK,CAACK,OAAV,CAAkB;AACtBC,MAAAA,MAAM,EAAEL,WAAW,CAACK,MADE;AAEtBC,MAAAA,QAAQ,EAAEN,WAAW,CAACM,QAFA;AAGtBC,MAAAA,WAAW,EAAEP,WAAW,CAACO,WAHH;AAItBC,MAAAA,QAAQ,EAAER,WAAW,CAACS,MAJA;AAKtBC,MAAAA,YAAY,EAAE,gBALQ;AAMtBC,MAAAA,KAAK,EAAE;AANe,KAAlB,CAFD;;AAAA,SAYPC,KAZO,GAYC,MAAM;AACV,WAAKb,KAAL,CAAWc,SAAX;AACH,KAdM;;AAAA,SAgBPC,oBAhBO,GAgBgB,MAAM;AACzB,WAAKf,KAAL,CAAWgB,SAAX,CAAqB,CAACC,GAAD,EAAKC,WAAL,KAAqB;AACtC,YAAGA,WAAH,EAAgB;AACZ,cAAIC,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBH,WAAW,CAACI,SAAb,GAA0B,IAA1B,GAAiC,IAAIC,IAAJ,GAAWC,OAAX,EAAhD,CAAhB,CADY,CAC0E;;AACtFC,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCR,WAAW,CAACS,WAAjD;AACAF,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCR,WAAW,CAACU,OAA7C;AACAH,UAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC;AACAU,UAAAA,QAAQ,CAACC,IAAT,GAAgB,EAAhB,CALY,CAKO;;AACnBD,UAAAA,QAAQ,CAACE,QAAT,GAAoB7B,aAApB;AACA8B,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,SARD,MAQO;AACHJ,UAAAA,QAAQ,CAACE,QAAT,GAAoB5B,aAApB;AAEH;AACJ,OAbD;AAcH,KA/BM;;AAAA,SAiCP+B,eAjCO,GAiCW,MAAM;AACpB,UAAIf,SAAS,GAAGC,IAAI,CAACe,KAAL,CAAWV,YAAY,CAACW,OAAb,CAAqB,YAArB,CAAX,CAAhB,CADoB,CAC2C;;AAC/D,aAAO,IAAIb,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B,CAFoB,CAEoB;AAC3C,KApCM;AAAA;;AAAA;;AAyCX,eAAef,IAAf","sourcesContent":["/* eslint no-restricted-globals : 0 */ //para que anden las globables\n\nimport auth0 from 'auth0-js';\n\nimport { AUTH_CONFIG } from './auth0-variables';\n\nconst LOGIN_SUCCESS = '/contacto'\nconst LOGIN_FAILURE = '/'\nclass Auth {\n\n    auth0 = new auth0.WebAuth({\n        domain: AUTH_CONFIG.domain,\n        clientID: AUTH_CONFIG.clientID,\n        redirectUri: AUTH_CONFIG.redirectUri,\n        audience: AUTH_CONFIG.apiURL,\n        responseType: 'token id_token',\n        scope: 'read:productos',\n    })\n    \n\n    login = () => {\n        this.auth0.authorize()\n    }\n\n    handleAuthentication = () => {\n        this.auth0.parseHash((err,authResults) => {\n            if(authResults) {\n                let expiresAt = JSON.stringify((authResults.expiresIn) * 1000 + new Date().getTime()) // lo convierto a timestamp\n                localStorage.setItem(\"access_token\", authResults.accessToken)\n                localStorage.setItem(\"id_token\", authResults.idToken)\n                localStorage.setItem(\"expires_at\", expiresAt)\n                location.hash = \"\" // borro del query stream por seguridad\n                location.pathname = LOGIN_SUCCESS\n                console.log(\"HOLA\")\n            } else {\n                location.pathname = LOGIN_FAILURE\n\n            }\n        })\n    }\n\n    isAuthenticated = () => {\n        let expiresAt = JSON.parse(localStorage.getItem('expires_at')) // obtengo el timestamp de la validez de la key\n        return new Date().getTime() < expiresAt // me fijo si sigue siendo valida\n    }\n\n\n}\n \nexport default Auth;"]},"metadata":{},"sourceType":"module"}