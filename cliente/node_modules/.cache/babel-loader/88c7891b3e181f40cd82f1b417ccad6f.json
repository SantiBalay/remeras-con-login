{"ast":null,"code":"import auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.LOGIN_SUCCESS = '/contacto';\n    this.LOGIN_FAILURE = '/';\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-wewl-y8p.auth0.com',\n      clientID: '03ewbVYNMUB6VAu7c4MXjwN2tgoGBHx4',\n      redirectUri: 'http://localhost:3000/callback',\n      audience: 'https://dev-wewl-y8p.auth0.com/userinfo',\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResults) => {\n        if (authResults && authResults.accessToken && authResults.idToken) {\n          let expiresAt = JSON.stringify(authResults.expiresIn * 1000 + new Date().getTime()); // lo convierto a timestamp\n\n          localStorage.setItem(\"access_token\", authResults.accessToken);\n          localStorage.setItem(\"id_token\", authResults.idToken);\n          localStorage.setItem(\"expires_at\", expiresAt);\n          location.hash = \"\"; // borro del query stream por seguridad\n\n          location.pathname = LOGIN_SUCCESS;\n        } else {\n          location.pathname = LOGIN_FAILURE;\n        }\n      });\n    };\n\n    this.isAuthenticated = () => {\n      let expires_at = JSON.parse(localStorage.getItem('expires_at')); // obtengo el timestamp de la validez de la key\n\n      return new Date.getTime() < expires_at; // me fijo si sigue siendo valida\n    };\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/santiagobalay/Desktop/workspace/ReactProjects/pagina-react-con-auth/cliente/src/Auth.js"],"names":["auth0","Auth","LOGIN_SUCCESS","LOGIN_FAILURE","WebAuth","domain","clientID","redirectUri","audience","responseType","scope","login","authorize","handleAuthentication","parseHash","err","authResults","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","location","hash","pathname","isAuthenticated","expires_at","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAGA,MAAMC,IAAN,CAAW;AAAA;AAAA,SAEPC,aAFO,GAES,WAFT;AAAA,SAGPC,aAHO,GAGS,GAHT;AAAA,SAKPH,KALO,GAKC,IAAIA,KAAK,CAACI,OAAV,CAAkB;AACtBC,MAAAA,MAAM,EAAE,wBADc;AAEtBC,MAAAA,QAAQ,EAAE,kCAFY;AAGtBC,MAAAA,WAAW,EAAE,gCAHS;AAItBC,MAAAA,QAAQ,EAAE,yCAJY;AAKtBC,MAAAA,YAAY,EAAE,gBALQ;AAMtBC,MAAAA,KAAK,EAAE;AANe,KAAlB,CALD;;AAAA,SAgBPC,KAhBO,GAgBC,MAAM;AACV,WAAKX,KAAL,CAAWY,SAAX;AACH,KAlBM;;AAAA,SAoBPC,oBApBO,GAoBgB,MAAM;AACzB,WAAKb,KAAL,CAAWc,SAAX,CAAqB,CAACC,GAAD,EAAKC,WAAL,KAAqB;AACtC,YAAGA,WAAW,IAAIA,WAAW,CAACC,WAA3B,IAA0CD,WAAW,CAACE,OAAzD,EAAkE;AAC9D,cAAIC,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBL,WAAW,CAACM,SAAb,GAA0B,IAA1B,GAAiC,IAAIC,IAAJ,GAAWC,OAAX,EAAhD,CAAhB,CAD8D,CACwB;;AACtFC,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCV,WAAW,CAACC,WAAjD;AACAQ,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCV,WAAW,CAACE,OAA7C;AACAO,UAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC;AACAQ,UAAAA,QAAQ,CAACC,IAAT,GAAgB,EAAhB,CAL8D,CAK3C;;AACnBD,UAAAA,QAAQ,CAACE,QAAT,GAAoB3B,aAApB;AACH,SAPD,MAOO;AACHyB,UAAAA,QAAQ,CAACE,QAAT,GAAoB1B,aAApB;AAEH;AACJ,OAZD;AAaH,KAlCM;;AAAA,SAoCP2B,eApCO,GAoCW,MAAM;AACpB,UAAIC,UAAU,GAAGX,IAAI,CAACY,KAAL,CAAWP,YAAY,CAACQ,OAAb,CAAqB,YAArB,CAAX,CAAjB,CADoB,CAC4C;;AAChE,aAAO,IAAIV,IAAI,CAACC,OAAT,KAAqBO,UAA5B,CAFoB,CAEmB;AAC1C,KAvCM;AAAA;;AAAA;;AA4CX,eAAe9B,IAAf","sourcesContent":["import auth0 from 'auth0-js';\n\n \nclass Auth {\n\n    LOGIN_SUCCESS = '/contacto'\n    LOGIN_FAILURE = '/'\n\n    auth0 = new auth0.WebAuth({\n        domain: 'dev-wewl-y8p.auth0.com',\n        clientID: '03ewbVYNMUB6VAu7c4MXjwN2tgoGBHx4',\n        redirectUri: 'http://localhost:3000/callback',\n        audience: 'https://dev-wewl-y8p.auth0.com/userinfo',\n        responseType: 'token id_token',\n        scope: 'openid'\n    })\n\n  \n\n    login = () => {\n        this.auth0.authorize()\n    }\n\n    handleAuthentication = () => {\n        this.auth0.parseHash((err,authResults) => {\n            if(authResults && authResults.accessToken && authResults.idToken) {\n                let expiresAt = JSON.stringify((authResults.expiresIn) * 1000 + new Date().getTime()) // lo convierto a timestamp\n                localStorage.setItem(\"access_token\", authResults.accessToken)\n                localStorage.setItem(\"id_token\", authResults.idToken)\n                localStorage.setItem(\"expires_at\", expiresAt)\n                location.hash = \"\" // borro del query stream por seguridad\n                location.pathname = LOGIN_SUCCESS\n            } else {\n                location.pathname = LOGIN_FAILURE\n\n            }\n        })\n    }\n\n    isAuthenticated = () => {\n        let expires_at = JSON.parse(localStorage.getItem('expires_at')) // obtengo el timestamp de la validez de la key\n        return new Date.getTime() < expires_at // me fijo si sigue siendo valida\n    }\n\n\n}\n \nexport default Auth;"]},"metadata":{},"sourceType":"module"}